from telebot import types
from database import get_db_connection
import uuid
from yookassa import Configuration, Payment

Configuration.account_id = "999342"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à shopId
Configuration.secret_key = "test_oqJzffEIfPKYpd2RJaE4HSsrRYoYwUoam3rr8VlXIxw"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á

def register_start_handlers(bot):
    @bot.message_handler(commands=['start'])
    def start_command(message):
        chat_id = message.chat.id
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –∫–æ–º–∞–Ω–¥–µ /start
        args = message.text.split()
        if len(args) > 1:
            unique_id = args[1]
            cursor.execute("SELECT * FROM capsules WHERE link = ? AND is_active = 1", (unique_id,))
            capsule = cursor.fetchone()

            if capsule:
                handle_capsule_join(bot, chat_id, capsule, cursor, conn)
            else:
                bot.reply_to(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞.")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("SELECT * FROM users WHERE chat_id = ?", (chat_id,))
            user = cursor.fetchone()

            if user:
                if user['role'] == 'leader':
                    show_leader_menu(bot, chat_id)
                elif user['role'] == 'member':
                    bot.send_message(chat_id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã.")
                else:
                    show_guest_menu(bot, chat_id)  # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–∏
            else:
                show_guest_menu(bot, chat_id)  # –ú–µ–Ω—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        conn.close()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–∞–ø—Å—É–ª–µ
    def handle_capsule_join(bot, chat_id, capsule, cursor, conn):
        cursor.execute("SELECT * FROM users WHERE chat_id = ?", (chat_id,))
        user = cursor.fetchone()

        if user and user['role'] == 'leader' and capsule['leader_id'] == chat_id:
            bot.send_message(chat_id, "–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º —ç—Ç–æ–π –∫–∞–ø—Å—É–ª—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫.")
            show_leader_menu(bot, chat_id)
        else:
            cursor.execute(
                "INSERT OR REPLACE INTO users (chat_id, role, capsule_id) VALUES (?, 'member', ?)",
                (chat_id, capsule['id'])
            )
            conn.commit()
            bot.send_message(chat_id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–∞–ø—Å—É–ª–µ '{capsule['team_name']}'.")
            markup = types.InlineKeyboardMarkup()
            start_quiz_btn = types.InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑", callback_data=f"start_quiz_{capsule['id']}")
            markup.add(start_quiz_btn)
            bot.send_message(chat_id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑:", reply_markup=markup)

    # –ú–µ–Ω—é –¥–ª—è –≥–æ—Å—Ç–µ–π (–Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    def show_guest_menu(bot, chat_id):
        description = (
            "ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!*\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞–ø—Å—É–ª—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥, –ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ–ø—Ä–æ—Å—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n\n"
            "üíº *–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:*\n"
            "1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø—Å—É–ª–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏.\n"
            "2Ô∏è‚É£ –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.\n"
            "3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å–µ–º –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n\n"
            "üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞:* 50 —Ä—É–±–ª–µ–π.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø –∏ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
        )

        markup = types.InlineKeyboardMarkup()
        buy_access_btn = types.InlineKeyboardButton("üîë –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy_access")
        markup.add(buy_access_btn)

        bot.send_message(chat_id, description, parse_mode="Markdown", reply_markup=markup)

    # –ü–æ–∫—É–ø–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    def create_payment(chat_id, description, amount, payment_type):
        """
        –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa.
        """
        try:
            payment = Payment.create({
                "amount": {
                    "value": f"{amount:.2f}",  # –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
                    "currency": "RUB"
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": "https://your-return-url.com/"  # –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π URL –≤–æ–∑–≤—Ä–∞—Ç–∞
                },
                "capture": True,
                "description": description,
                "metadata": {
                    "chat_id": chat_id,  # –ü–µ—Ä–µ–¥–∞–µ–º chat_id –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    "type": payment_type  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞
                }
            }, uuid.uuid4())

            return payment.confirmation.confirmation_url  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return None

            return payment.confirmation.confirmation_url  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return None

    @bot.callback_query_handler(func=lambda call: call.data == "buy_access")
    def buy_access(call):
        chat_id = call.message.chat.id
        payment_url = create_payment(chat_id, "–ü–æ–∫—É–ø–∫–∞ –¥–æ—Å—Ç—É–ø–∞", 100.00, "buy_access")

        if payment_url:
            markup = types.InlineKeyboardMarkup()
            payment_button = types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å 100 —Ä—É–±–ª–µ–π", url=payment_url)
            markup.add(payment_button)
            bot.send_message(chat_id, "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)
        else:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


def show_leader_menu(bot, chat_id):
    markup = types.InlineKeyboardMarkup()
    create_capsule_btn = types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–∞–ø—Å—É–ª—É", callback_data="create_capsule")
    my_capsules_btn = types.InlineKeyboardButton("–ú–æ–∏ –∫–∞–ø—Å—É–ª—ã", callback_data="my_capsules")
    my_balance_btn = types.InlineKeyboardButton("–ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="my_balance")
    markup.add(create_capsule_btn, my_capsules_btn, my_balance_btn)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
