import uuid
from telebot import types
from database import get_db_connection
from TeamScripts.qwiz import start_survey, active_surveys, handle_survey_response
from GPTwork.GPTsummary import send_to_gpt
from handlers.start import show_leader_menu
from telebot.types import LabeledPrice, PreCheckoutQuery, SuccessfulPayment
from yookassa import Configuration, Payment


Configuration.account_id = ""  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à shopId
Configuration.secret_key = ""  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
CAPSULE_PRICE = 300
def register_leader_handlers(bot):
    def ensure_user_balance(chat_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∞–ª–∞–Ω—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("INSERT OR IGNORE INTO balances (chat_id, balance) VALUES (?, 0)", (chat_id,))
        conn.commit()
        conn.close()

    @bot.callback_query_handler(func=lambda call: call.data == "create_capsule")
    def create_capsule(call):
        chat_id = call.message.chat.id
        ensure_user_balance(chat_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT balance FROM balances WHERE chat_id = ?", (chat_id,))
        balance = cursor.fetchone()["balance"]
        conn.close()

        if balance < CAPSULE_PRICE:
            # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
            markup = types.InlineKeyboardMarkup()
            top_up_btn = types.InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up_balance")
            back_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_leader_menu")
            markup.add(top_up_btn, back_btn)

            bot.send_message(
                chat_id,
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ø—Å—É–ª—ã.\n\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±–ª–µ–π.\n"
                f"üí° –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ø—Å—É–ª—ã: {CAPSULE_PRICE} —Ä—É–±–ª–µ–π.",
                reply_markup=markup
            )
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
        bot.register_next_step_handler(msg, process_team_name)
    def process_team_name(message):
        team_name = message.text.strip()
        chat_id = message.chat.id
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
        bot.register_next_step_handler(message, lambda msg: process_team_description(msg, team_name))

    def process_team_description(message, team_name):
        description = message.text.strip()
        chat_id = message.chat.id

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î
        unique_id = str(uuid.uuid4())
        link = f"https://t.me/{bot.get_me().username}?start={unique_id}"

        conn = get_db_connection()
        cursor = conn.cursor()

        try:
            cursor.execute(
                "INSERT INTO capsules (leader_id, team_name, description, link) VALUES (?, ?, ?, ?)",
                (chat_id, team_name, description, unique_id)
            )
            cursor.execute("UPDATE balances SET balance = balance - ? WHERE chat_id = ?", (CAPSULE_PRICE, chat_id))
            conn.commit()
            bot.send_message(
                chat_id,
                f"‚úÖ –ö–∞–ø—Å—É–ª–∞ '{team_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n–°—Å—ã–ª–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã: {link}"
            )
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            conn.close()

        show_leader_menu(bot, chat_id)

    @bot.callback_query_handler(func=lambda call: call.data == "my_capsules")
    def manage_capsules(call):
        chat_id = call.message.chat.id
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute("SELECT * FROM capsules WHERE leader_id = ?", (chat_id,))
        capsules = cursor.fetchall()

        if capsules:
            markup = types.InlineKeyboardMarkup(row_width=1)
            back_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_leader_menu")
            for capsule in capsules:
                select_btn = types.InlineKeyboardButton(
                    f"{capsule['team_name']}",
                    callback_data=f"select_capsule_{capsule['id']}"
                )
                markup.add(select_btn)
            markup.add(back_btn)

            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ø—Å—É–ª—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)
        else:
            bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞–ø—Å—É–ª.")
        conn.close()

    @bot.callback_query_handler(func=lambda call: call.data.startswith("select_capsule_"))
    def manage_selected_capsule(call):
        chat_id = call.message.chat.id
        capsule_id = int(call.data.split("select_capsule_")[1])

        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute("SELECT * FROM capsules WHERE id = ?", (capsule_id,))
        capsule = cursor.fetchone()
        conn.close()

        if capsule:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–ø—Å—É–ª—ã
            is_active = capsule['is_active']

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
            markup = types.InlineKeyboardMarkup(row_width=1)

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ (–¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–≥–¥–∞)
            repeat_link_btn = types.InlineKeyboardButton(
                "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"repeat_link_{capsule_id}"
            )
            markup.add(repeat_link_btn)

            if is_active:
                # –ï—Å–ª–∏ –∫–∞–ø—Å—É–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–≤–∏–∑ –∏ –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∞
                quiz_btn = types.InlineKeyboardButton(
                    f"–ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑: {capsule['team_name']}",
                    callback_data=f"quiz_{capsule['id']}"
                )
                end_btn = types.InlineKeyboardButton(
                    "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä", callback_data=f"end_{capsule_id}"
                )
                back_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_leader_menu")
                markup.add(quiz_btn, end_btn, back_btn)
            else:
                # –ï—Å–ª–∏ —Å–±–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–ø—Å—É–ª—ã
                repeat_email_btn = types.InlineKeyboardButton(
                    "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–∏—Å—å–º–æ", callback_data=f"repeat_email_{capsule_id}"
                )
                delete_btn = types.InlineKeyboardButton(
                    "–£–¥–∞–ª–∏—Ç—å –∫–∞–ø—Å—É–ª—É", callback_data=f"delete_capsule_{capsule_id}"
                )
                back_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_leader_menu")
                markup.add(repeat_email_btn, delete_btn, back_btn)

            bot.edit_message_text(
                f"–ö–∞–ø—Å—É–ª–∞: {capsule['team_name']}\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                chat_id=chat_id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
        else:
            bot.reply_to(call.message, "–û—à–∏–±–∫–∞: –∫–∞–ø—Å—É–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("quiz_"))
    def start_quiz(call):
        chat_id = call.message.chat.id

        try:
            capsule_id = int(call.data.split("quiz_")[1])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
        except ValueError:
            bot.reply_to(call.message, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–ø—Å—É–ª—ã.")
            return

        print(f"–ù–∞—á–∞–ª–æ –∫–≤–∏–∑–∞: chat_id={chat_id}, capsule_id={capsule_id}")  # –û—Ç–ª–∞–¥–∫–∞

        # –ó–∞–ø—É—Å–∫ –∫–≤–∏–∑–∞
        start_survey(bot, call.message, capsule_id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("end_"))
    def end_survey(call):
        chat_id = call.message.chat.id
        capsule_id = int(call.data.split("end_")[1])

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE capsules SET is_active = 0 WHERE id = ?", (capsule_id,))
        conn.commit()
        conn.close()

        bot.send_message(chat_id, "–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à—ë–Ω. –û—Ç–≤–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        send_to_gpt(bot, capsule_id)
        show_leader_menu(bot, chat_id)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–≤–∏–∑
    @bot.message_handler(func=lambda message: message.chat.id in active_surveys)
    def process_survey_response(message):
        handle_survey_response(bot, message)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("delete_capsule_"))
    def delete_capsule(call):
        chat_id = call.message.chat.id
        capsule_id = int(call.data.split("delete_capsule_")[1])

        conn = get_db_connection()
        cursor = conn.cursor()

        # –£–¥–∞–ª—è–µ–º –∫–∞–ø—Å—É–ª—É –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute("DELETE FROM capsules WHERE id = ?", (capsule_id,))
        cursor.execute("DELETE FROM users WHERE capsule_id = ?", (capsule_id,))
        conn.commit()
        conn.close()

        bot.answer_callback_query(call.id, "–ö–∞–ø—Å—É–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
        bot.send_message(chat_id, "–ö–∞–ø—Å—É–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        show_leader_menu(bot, chat_id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("repeat_link_"))
    def repeat_link(call):
        chat_id = call.message.chat.id
        capsule_id = int(call.data.split("repeat_link_")[1])

        conn = get_db_connection()
        cursor = conn.cursor()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Å—ã–ª–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT link FROM capsules WHERE id = ?", (capsule_id,))
        capsule = cursor.fetchone()
        conn.close()

        if capsule and capsule['link']:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
            bot.send_message(chat_id, f"https://t.me/{bot.get_me().username}?start={capsule['link']}")
            show_leader_menu(bot, chat_id)
        else:
            bot.reply_to(call.message, "–û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É(")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("repeat_email_"))
    def repeat_email(call):
        chat_id = call.message.chat.id
        capsule_id = int(call.data.split("repeat_email_")[1])

        conn = get_db_connection()
        cursor = conn.cursor()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∏—Å—å–º–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT capsule_mail, team_name FROM capsules WHERE id = ?", (capsule_id,))
        capsule = cursor.fetchone()

        if capsule and capsule["capsule_mail"]:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –ª–∏–¥–µ—Ä—É
            bot.send_message(
                chat_id,
                f"–ö–æ–º–∞–Ω–¥–∞ '{capsule['team_name']}', –≤–∞—à–∞ –∫–∞–ø—Å—É–ª–∞ –≤—Ä–µ–º–µ–Ω–∏:\n\n{capsule['capsule_mail']}"
            )
            bot.answer_callback_query(call.id, "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ!")
        else:
            # –ï—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            bot.answer_callback_query(call.id, "–ü–∏—Å—å–º–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –∫–∞–ø—Å—É–ª–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            bot.send_message(chat_id, "–ü–∏—Å—å–º–æ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–æ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–±–æ—Ä, —á—Ç–æ–±—ã –µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.")

        conn.close()
        show_leader_menu(bot, chat_id)

    @bot.callback_query_handler(func=lambda call: call.data == "my_balance")
    def show_balance(call):
        chat_id = call.message.chat.id

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ª–∏–¥–µ—Ä–∞
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT balance FROM balances WHERE chat_id = ?", (chat_id,))
        result = cursor.fetchone()
        conn.close()

        balance = result["balance"] if result else 0  # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω 0

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        markup = types.InlineKeyboardMarkup(row_width=1)
        top_up_btn = types.InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up_balance")
        back_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_leader_menu")
        markup.add(top_up_btn, back_btn)

        bot.edit_message_text(
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±–ª–µ–π.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            chat_id=chat_id,
            message_id=call.message.message_id,
            reply_markup=markup
        )

    # @bot.callback_query_handler(func=lambda call: call.data == "top_up_balance")
    # def top_up_balance(call):
    #     chat_id = call.message.chat.id
    #
    #     # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ (50 —Ä—É–±–ª–µ–π = 5000 –∫–æ–ø–µ–µ–∫)
    #     prices = [LabeledPrice(label="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", amount=5000)]
    #
    #     try:
    #         bot.send_invoice(
    #             chat_id=chat_id,
    #             title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
    #             description="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω–∞ —Å—É–º–º—É 50 —Ä—É–±–ª–µ–π.",
    #             provider_token="381764678:TEST:104434",  # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á!
    #             currency="RUB",
    #             prices=prices,
    #             start_parameter="balance_recharge",
    #             invoice_payload="balance_50"
    #         )
    #         print("–ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ.")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
    #     except Exception as e:
    #         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞: {e}")
    #         bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—á—ë—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    def create_payment(chat_id, description, amount, payment_type):
        """
        –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa.
        """
        try:
            payment = Payment.create({
                "amount": {
                    "value": f"{amount:.2f}",  # –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
                    "currency": "RUB"
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": "https://your-return-url.com/"  # –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π URL –≤–æ–∑–≤—Ä–∞—Ç–∞
                },
                "capture": True,
                "description": description,
                "metadata": {
                    "chat_id": chat_id,  # –ü–µ—Ä–µ–¥–∞–µ–º chat_id –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    "type": payment_type  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞
                }
            }, uuid.uuid4())

            return payment.confirmation.confirmation_url  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return None

    @bot.callback_query_handler(func=lambda call: call.data == "top_up_balance")
    def top_up_balance(call):
        chat_id = call.message.chat.id
        payment_url = create_payment(chat_id, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", 300.00, "top_up_balance")

        if payment_url:
            markup = types.InlineKeyboardMarkup()
            payment_button = types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å 300 —Ä—É–±–ª–µ–π", url=payment_url)
            markup.add(payment_button)
            bot.send_message(chat_id, "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)
        else:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre_checkout_query
    @bot.pre_checkout_query_handler(func=lambda query: True)
    def checkout_handler(pre_checkout_query: PreCheckoutQuery):
        print(f"DEBUG: pre_checkout_query –≤—ã–∑–≤–∞–Ω —Å ID {pre_checkout_query.id}")
        bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    @bot.message_handler(content_types=['successful_payment'])
    def successful_payment_handler(message):
        chat_id = message.chat.id

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE balances SET balance = balance + 300 WHERE chat_id = ?",
                (chat_id,)
            )
            conn.commit()
            conn.close()

            bot.send_message(chat_id, "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 300 —Ä—É–±–ª–µ–π.")
            print(f"–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    @bot.callback_query_handler(func=lambda call: call.data == "back_to_leader_menu")
    def back_to_leader_menu(call):
        chat_id = call.message.chat.id

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ª–∏–¥–µ—Ä–∞
        show_leader_menu(bot, chat_id)

